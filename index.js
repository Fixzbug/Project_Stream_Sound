//üì• ‡∏£‡∏±‡∏ö UDP audio ‡∏à‡∏≤‡∏Å ESP32
//üõ†Ô∏è ‡∏ï‡πà‡∏≠‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
//üîä ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á (amplify)
//üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô .wav ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads/
//üè∑Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏° device (‡πÄ‡∏ä‡πà‡∏ô sound_XXXXXXXXXXXX.wav)
//üï∞Ô∏è (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ timestamp ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏õ‡∏¥‡∏î getTimestamp() ‡πÑ‡∏î‡πâ.
//‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ device ‡πÄ‡∏õ‡πá‡∏ô "sound-XXXXXXXXXXXX" (‡∏à‡∏≤‡∏Å ChipID).
//‚úÖ ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô UDP ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ (64 bytes ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á packet).
//‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠.
//‚úÖ ‡πÉ‡∏ä‡πâ AGC ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á.
//‚úÖ Server ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠ device ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå .wav ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢.


const dgram = require('dgram');  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á UDP server
const fs = require('fs');  // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
const path = require('path');  // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ path ‡πÑ‡∏ü‡∏•‡πå
const wav = require('wav');  // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå .wav

const INACTIVITY_TIMEOUT = 3000;  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å device ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ stream ‡∏à‡∏ö
const AMPLIFY_GAIN = 8;  // ‚úÖ ‡∏Ñ‡πà‡∏≤ gain ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á 8 ‡πÄ‡∏ó‡πà‡∏≤

const UPLOADS_DIR = path.join(__dirname, 'uploads');  // ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(UPLOADS_DIR)) {
  fs.mkdirSync(UPLOADS_DIR);
  console.log(`Created directory: ${UPLOADS_DIR}`);
}

const devices = new Map();  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ device ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
const saveQueue = [];  // ‚úÖ Queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
let isSaving = false;  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏° (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏ô)

console.log("Starting UDP server...");

const audioServer = dgram.createSocket('udp4');  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á UDP server

audioServer.on('message', (msg, rinfo) => {
  // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠ device ‡∏à‡∏≤‡∏Å 64 bytes ‡πÅ‡∏£‡∏Å
  const deviceName = msg.toString('utf-8', 0, 64).replace(/\0/g, '');
  // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 64 bytes ‡πÅ‡∏£‡∏Å
  const audioData = msg.subarray(64);

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠ device ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á buffer ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (!devices.has(deviceName)) {
    devices.set(deviceName, {
      chunks: [],
      timeout: null
    });
    console.log(`New device detected: ${deviceName}`);
  }

  const device = devices.get(deviceName);
  device.chunks.push(Buffer.from(audioData));  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏á‡πÉ‡∏ô buffer

  // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï timeout (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°)
  clearTimeout(device.timeout);
  device.timeout = setTimeout(() => {
    enqueueSave(deviceName, device.chunks);  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ inactivity ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    devices.delete(deviceName);  // ‚úÖ ‡∏•‡∏ö device ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å map
  }, INACTIVITY_TIMEOUT);
});

// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î UDP server ‡∏ó‡∏µ‡πà port 12345
audioServer.bind(12345, () => {
  console.log(`UDP Server listening on port 12345`);
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Ç‡πâ‡∏≤ queue
function enqueueSave(deviceName, chunks) {
  saveQueue.push({ deviceName, chunks });
  processQueue();
}

// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ queue ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô)
function processQueue() {
  if (isSaving || saveQueue.length === 0) return;

  isSaving = true;
  const { deviceName, chunks } = saveQueue.shift();

  saveWavFile(deviceName, chunks, () => {
    isSaving = false;
    processQueue();  // ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô queue
  });
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function amplify(buffer, gain) {
  const view = new Int16Array(buffer.buffer, buffer.byteOffset, buffer.length / 2);
  for (let i = 0; i < view.length; i++) {
    let amplified = view[i] * gain;
    if (amplified > 32767) amplified = 32767;  // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    if (amplified < -32768) amplified = -32768;  // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    view[i] = amplified;
  }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ)
function getTimestamp() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hour = String(now.getHours()).padStart(2, '0');
  const minute = String(now.getMinutes()).padStart(2, '0');
  const second = String(now.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day}_${hour}-${minute}-${second}`;
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå WAV ‡∏•‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads/
function saveWavFile(deviceName, chunks, callback) {
  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ device ‡πÄ‡∏ä‡πà‡∏ô sound_XXXXXXXXXXXX.wav
  const fileName = path.join(UPLOADS_DIR, `${deviceName}.wav`);
  const fileStream = fs.createWriteStream(fileName);

  const writer = new wav.Writer({
    channels: 1,  // ‚úÖ Mono
    sampleRate: 16000,  // ‚úÖ 16kHz
    bitDepth: 16  // ‚úÖ 16-bit
  });

  console.log(`Saving ${fileName}...`);

  writer.pipe(fileStream);

  for (const chunk of chunks) {
    amplify(chunk, AMPLIFY_GAIN);  // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    writer.write(chunk);  // ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå WAV
  }

  writer.end(() => {
    console.log(`Saved ${fileName}`);
    callback();  // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ processQueue ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
  });
}
